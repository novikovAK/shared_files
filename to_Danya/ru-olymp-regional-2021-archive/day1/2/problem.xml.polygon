<?xml version="1.0" encoding="utf-8" standalone="no"?>
<problem revision="36" short-name="split-numbers" url="https://polygon.codeforces.com/p0SAiig/imka/split-numbers">
    <names>
        <name language="russian" value="Разбиение таблицы"/>
    </names>
    <statements>
        <statement charset="UTF-8" language="russian" mathjax="true" path="statements/russian/problem.tex" type="application/x-tex"/>
        <statement language="russian" path="statements/.pdf/russian/problem.pdf" type="application/pdf"/>
    </statements>
    <tutorials>
        <tutorial charset="UTF-8" language="russian" mathjax="true" path="statements/russian/tutorial.tex" type="application/x-tex"/>
        <tutorial language="russian" path="statements/.pdf/russian/tutorial.pdf" type="application/pdf"/>
    </tutorials>
    <judging cpu-name="Intel(R) Core(TM) i3-8100 CPU @ 3.60GHz" cpu-speed="3600" input-file="" output-file="">
        <testset name="tests">
            <time-limit>1000</time-limit>
            <memory-limit>536870912</memory-limit>
            <test-count>45</test-count>
            <input-path-pattern>tests/%02d</input-path-pattern>
            <answer-path-pattern>tests/%02d.a</answer-path-pattern>
            <tests>
                <test group="0" method="manual" points="0.0" sample="true"/>
                <test group="1" method="manual" points="0.0"/>
                <test cmd="gen 1 10 10" group="1" method="generated" points="0.0"/>
                <test cmd="gen 1 1 100" group="1" method="generated" points="0.0"/>
                <test cmd="gen 1 100 1" group="1" method="generated" points="0.0"/>
                <test cmd="gen 1 100 100" group="1" method="generated" points="0.0"/>
                <test cmd="gen 1 100 99" group="1" method="generated" points="0.0"/>
                <test cmd="gen 1 99 100" group="1" method="generated" points="20.0"/>
                <test cmd="gen 1 200 1000" group="2" method="generated" points="0.0"/>
                <test cmd="gen 1 1000 200" group="2" method="generated" points="0.0"/>
                <test cmd="gen 1 2000 2000" group="2" method="generated" points="0.0"/>
                <test cmd="gen 1 1000 2000" group="2" method="generated" points="0.0"/>
                <test cmd="gen 1 1999 2000" group="2" method="generated" points="0.0"/>
                <test cmd="gen 1 1444 1944" group="2" method="generated" points="0.0"/>
                <test cmd="gen 1 1400 1500" group="2" method="generated" points="0.0"/>
                <test cmd="gen 1 1500 1400" group="2" method="generated" points="14.0"/>
                <test cmd="gen 1 100000 100" group="3" method="generated" points="0.0"/>
                <test cmd="gen 1 100 100000" group="3" method="generated" points="0.0"/>
                <test cmd="gen 1 10000000 1" group="3" method="generated" points="0.0"/>
                <test cmd="gen 1 1 10000000" group="3" method="generated" points="0.0"/>
                <test cmd="gen 1 3162 3162" group="3" method="generated" points="0.0"/>
                <test cmd="gen 1 2500 4000" group="3" method="generated" points="0.0"/>
                <test cmd="gen 1 4000 2500" group="3" method="generated" points="0.0"/>
                <test cmd="gen 1 3000 3000" group="3" method="generated" points="15.0"/>
                <test cmd="gen 1000 1 10000" group="4" method="generated" points="0.0"/>
                <test cmd="gen 1000 10000 1" group="4" method="generated" points="0.0"/>
                <test cmd="gen 1000 10 1000" group="4" method="generated" points="0.0"/>
                <test cmd="gen 1000 1000 10" group="4" method="generated" points="0.0"/>
                <test cmd="gen 1000 100 100" group="4" method="generated" points="0.0"/>
                <test cmd="gen 1000 200 50" group="4" method="generated" points="0.0"/>
                <test cmd="gen 1000 50 200" group="4" method="generated" points="16.0"/>
                <test cmd="gen 100000 1 1000000" group="5" method="generated" points="0.0"/>
                <test cmd="gen 100000 1 1000000000" group="5" method="generated" points="0.0"/>
                <test cmd="gen 100000 1 999999999" group="5" method="generated" points="0.0"/>
                <test cmd="gen 100000 1 500000000" group="5" method="generated" points="0.0"/>
                <test cmd="gen 100000 1 900000000" group="5" method="generated" points="0.0"/>
                <test cmd="gen 100000 1 950000000" group="5" method="generated" points="15.0"/>
                <test cmd="gen 100000 40000 25000" group="6" method="generated" points="0.0"/>
                <test cmd="gen 100000 1000000000 1" group="6" method="generated" points="0.0"/>
                <test cmd="gen 100000 100000 10000" group="6" method="generated" points="0.0"/>
                <test cmd="gen 100000 10000 100000" group="6" method="generated" points="0.0"/>
                <test cmd="gen 100000 100000 9999" group="6" method="generated" points="0.0"/>
                <test cmd="gen 100000 9999 100000" group="6" method="generated" points="0.0"/>
                <test cmd="gen 100000 20000 50000" group="6" method="generated" points="0.0"/>
                <test cmd="gen 100000 50000 20000" group="6" method="generated" points="20.0"/>
            </tests>
            <groups>
                <group feedback-policy="complete" name="0" points="0.0" points-policy="complete-group"/>
                <group feedback-policy="complete" name="1" points="20.0" points-policy="complete-group">
                    <dependencies>
                        <dependency group="0"/>
                    </dependencies>
                </group>
                <group feedback-policy="icpc" name="2" points="14.0" points-policy="complete-group">
                    <dependencies>
                        <dependency group="0"/>
                        <dependency group="1"/>
                    </dependencies>
                </group>
                <group feedback-policy="icpc" name="3" points="15.0" points-policy="complete-group">
                    <dependencies>
                        <dependency group="0"/>
                        <dependency group="1"/>
                        <dependency group="2"/>
                    </dependencies>
                </group>
                <group feedback-policy="icpc" name="4" points="16.0" points-policy="complete-group">
                    <dependencies>
                        <dependency group="0"/>
                        <dependency group="1"/>
                    </dependencies>
                </group>
                <group feedback-policy="icpc" name="5" points="15.0" points-policy="complete-group">
                    <dependencies>
                        <dependency group="0"/>
                    </dependencies>
                </group>
                <group feedback-policy="icpc" name="6" points="20.0" points-policy="complete-group">
                    <dependencies>
                        <dependency group="0"/>
                        <dependency group="1"/>
                        <dependency group="2"/>
                        <dependency group="3"/>
                        <dependency group="4"/>
                        <dependency group="5"/>
                    </dependencies>
                </group>
            </groups>
        </testset>
    </judging>
    <files>
        <resources>
            <file path="files/olymp.sty"/>
            <file path="files/problem.tex"/>
            <file path="files/statements.ftl"/>
            <file path="files/testlib.h" type="h.g++"/>
            <file path="files/tutorial.tex"/>
        </resources>
        <executables>
            <executable>
                <source path="files/gen.cpp" type="cpp.g++17"/>
                <binary path="files/gen.exe" type="exe.win32"/>
            </executable>
            <executable>
                <source path="files/validator.cpp" type="cpp.g++17"/>
                <binary path="files/validator.exe" type="exe.win32"/>
            </executable>
        </executables>
    </files>
    <assets>
        <checker name="std::fcmp.cpp" type="testlib">
            <source path="files/check.cpp" type="cpp.g++17"/>
            <binary path="check.exe" type="exe.win32"/>
            <copy path="check.cpp"/>
            <testset>
                <test-count>0</test-count>
                <input-path-pattern>files/tests/checker-tests/%02d</input-path-pattern>
                <output-path-pattern>files/tests/checker-tests/%02d.o</output-path-pattern>
                <answer-path-pattern>files/tests/checker-tests/%02d.a</answer-path-pattern>
                <tests/>
            </testset>
        </checker>
        <validators>
            <validator>
                <source path="files/validator.cpp" type="cpp.g++17"/>
                <binary path="files/validator.exe" type="exe.win32"/>
                <testset>
                    <test-count>2</test-count>
                    <input-path-pattern>files/tests/validator-tests/%02d</input-path-pattern>
                    <tests>
                        <test verdict="invalid"/>
                        <test verdict="invalid"/>
                    </tests>
                </testset>
            </validator>
        </validators>
        <solutions>
            <solution tag="main">
                <source path="solutions/split-numbers_dgok.cpp" type="cpp.g++17"/>
                <binary path="solutions/split-numbers_dgok.exe" type="exe.win32"/>
            </solution>
            <solution tag="time-limit-exceeded">
                <source path="solutions/split-numbers_dgtl1.cpp" type="cpp.g++17"/>
                <binary path="solutions/split-numbers_dgtl1.exe" type="exe.win32"/>
            </solution>
            <solution tag="rejected">
                <source path="solutions/split-numbers_dgtl2.cpp" type="cpp.g++17"/>
                <binary path="solutions/split-numbers_dgtl2.exe" type="exe.win32"/>
            </solution>
            <solution tag="time-limit-exceeded-or-accepted">
                <source path="solutions/split-numbers_dgtlok.cpp" type="cpp.g++17"/>
                <binary path="solutions/split-numbers_dgtlok.exe" type="exe.win32"/>
            </solution>
            <solution tag="accepted">
                <source path="solutions/split-numbers_mp.py" type="python.pypy3"/>
                <binary path="solutions/split-numbers_mp.pypys3" type="pythonx.pypy3"/>
            </solution>
        </solutions>
    </assets>
    <properties>
        <property name="tests-wellformed" value="true"/>
    </properties>
    <stresses>
        <stress-count>0</stress-count>
        <stress-path-pattern>stresses/%03d</stress-path-pattern>
        <list/>
    </stresses>
    <tags>
        <tag value="formula"/>
        <tag value="math"/>
    </tags>
</problem>
